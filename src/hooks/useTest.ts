import { useState, useCallback, useEffect } from 'react';
import { Option, GenderType, PartnerType, Question, TestResult, Compatibility } from '../types';
import { questions } from '../data/questions';
import { determineGender, determinePartnerType, generateResult, analyzeCompatibility } from '../utils/results';
import { useTelegram } from './useTelegram';

export function useTest() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<Option[]>([]);
  const [selectedOption, setSelectedOption] = useState<Option | null>(null);
  const [isTestCompleted, setIsTestCompleted] = useState(false);
  const [testResult, setTestResult] = useState<TestResult | null>(null);
  const [sharedTestId, setSharedTestId] = useState<string | null>(null);
  const [compatibility, setCompatibility] = useState<Compatibility | null>(null);
  const [userGender, setUserGender] = useState<GenderType | null>(null);
  
  const { tgWebApp, showMainButton, getUserData } = useTelegram();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL (–µ—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø–æ–¥–µ–ª–µ–Ω)
  useEffect(() => {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const searchParams = new URLSearchParams(window.location.search);
    const testId = searchParams.get('testId');
    const partnerType = searchParams.get('partnerType');
    const gender = searchParams.get('gender');
    
    if (testId && partnerType && gender) {
      setSharedTestId(testId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
      localStorage.setItem('sharedTestId', testId);
      localStorage.setItem('sharedPartnerType', partnerType);
      localStorage.setItem('sharedGender', gender);
    }
  }, []);
  
  // –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  const handleOptionSelect = useCallback((option: Option) => {
    setSelectedOption(option);
  }, []);
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const handleNextQuestion = useCallback(() => {
    if (!selectedOption) return;
    
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestionIndex] = selectedOption;
    setSelectedAnswers(newAnswers);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞)
    if (currentQuestionIndex === 0) {
      const gender = determineGender(selectedOption);
      setUserGender(gender);
    }
    
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
      setSelectedOption(null);
    } else {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
      if (userGender) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø–æ–ª–µ)
        const partnerType = determinePartnerType(newAnswers.slice(1));
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const result = generateResult(userGender, partnerType as PartnerType);
        setTestResult(result);
        setIsTestCompleted(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
        const sharedPartnerType = localStorage.getItem('sharedPartnerType');
        const sharedGender = localStorage.getItem('sharedGender');
        
        if (sharedPartnerType && sharedGender) {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–æ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–º
          const compatibilityData = analyzeCompatibility(partnerType as PartnerType, sharedPartnerType as PartnerType);
          setCompatibility(compatibilityData);
        }
      }
    }
  }, [currentQuestionIndex, selectedOption, selectedAnswers, userGender]);
  
  // –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
  const restartTest = useCallback(() => {
    setCurrentQuestionIndex(0);
    setSelectedAnswers([]);
    setSelectedOption(null);
    setIsTestCompleted(false);
    setTestResult(null);
    setCompatibility(null);
    setUserGender(null);
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è —à–µ—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const shareResult = useCallback(() => {
    if (!testResult || !userGender) return;
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      const shareText = `üé¨ –Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç "–ö–∞–∫–∞—è –∫–∏–Ω–æ–∑–≤–µ–∑–¥–∞ —Å—Ç–∞–Ω–µ—Ç –º–æ–∏–º –∏–¥–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"!
      
–ú–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä: ${testResult.name} ${testResult.emoji}

"${testResult.songLine}"

–£–∑–Ω–∞–π, –∫—Ç–æ —Ç–≤–æ—è –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞!`;
      
      // –ò–º—è –±–æ—Ç–∞ –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
      const botUsername = 'knowyourmagic_bot';
      
      // –ü–∞—Ä—Ç–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ç–µ—Å—Ç–∞
      const partnerType = testResult.type;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const appUrl = `https://t.me/${botUsername}/ghKJ67/app?testId=shared&partnerType=${partnerType}&gender=${userGender}`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º Telegram –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
      const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(appUrl)}&text=${encodeURIComponent(shareText)}`;
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —à–µ—Ä–∏–Ω–≥–∞ –≤ Telegram
      tgWebApp.openTelegramLink(shareUrl);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  }, [testResult, userGender, tgWebApp]);
  
  return {
    currentQuestion: questions[currentQuestionIndex],
    currentQuestionIndex,
    totalQuestions: questions.length,
    selectedOption,
    isTestCompleted,
    testResult,
    compatibility,
    sharedTestId,
    userGender,
    handleOptionSelect,
    handleNextQuestion,
    restartTest,
    shareResult
  };
}
