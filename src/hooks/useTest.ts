import { useState, useCallback, useEffect } from 'react';
import { Option, Question, TestResult, Compatibility } from '../types';
import { enhancedQuestions } from '../data/enhancedQuestions';
import { determinePersonalityType, generateResult, analyzeCompatibility } from '../utils/results';
import { useTelegram } from './useTelegram';

export function useTest() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<Option[]>([]);
  const [selectedOption, setSelectedOption] = useState<Option | null>(null);
  const [isTestCompleted, setIsTestCompleted] = useState(false);
  const [testResult, setTestResult] = useState<TestResult | null>(null);
  const [sharedTestId, setSharedTestId] = useState<string | null>(null);
  const [compatibility, setCompatibility] = useState<Compatibility | null>(null);
  
  const { tgWebApp, showMainButton, getUserData } = useTelegram();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL (–µ—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø–æ–¥–µ–ª–µ–Ω)
  useEffect(() => {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const searchParams = new URLSearchParams(window.location.search);
    const testId = searchParams.get('testId');
    const powerType = searchParams.get('powerType');
    
    if (testId && powerType) {
      setSharedTestId(testId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
      localStorage.setItem('sharedTestId', testId);
      localStorage.setItem('sharedPowerType', powerType);
    }
  }, []);
  
  // –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  const handleOptionSelect = useCallback((option: Option) => {
    setSelectedOption(option);
  }, []);
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const handleNextQuestion = useCallback(() => {
    if (!selectedOption) return;
    
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestionIndex] = selectedOption;
    setSelectedAnswers(newAnswers);
    
    if (currentQuestionIndex < enhancedQuestions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
      setSelectedOption(null);
    } else {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
      const powerType = determinePersonalityType(newAnswers);
      const result = generateResult(powerType);
      setTestResult(result);
      setIsTestCompleted(true);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Result
      console.log('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
      const sharedPowerType = localStorage.getItem('sharedPowerType');
      if (sharedPowerType) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–æ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–º
        const compatibilityData = analyzeCompatibility(powerType, sharedPowerType as any);
        setCompatibility(compatibilityData);
      }
    }
  }, [currentQuestionIndex, selectedOption, selectedAnswers]);
  
  // –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
  const restartTest = useCallback(() => {
    setCurrentQuestionIndex(0);
    setSelectedAnswers([]);
    setSelectedOption(null);
    setIsTestCompleted(false);
    setTestResult(null);
    setCompatibility(null);
  }, []);
  
  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const shareResult = useCallback(() => {
    if (!testResult) return;
    
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Ç–∏–ø–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
      const resultType = testResult.type;
      const randomPart = Math.random().toString(36).substring(2, 6);
      const shareId = resultType.substring(0, 3) + randomPart;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      const shareText = `üß† –Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç "–ü–∞–∑–ª—ã" –∏ —É–∑–Ω–∞–ª —Å–≤–æ—é —Å–∫—Ä—ã—Ç—É—é —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å!
      
–ú–æ—è —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${testResult.name} ${testResult.emoji}

"${testResult.songLine}"

–£–∑–Ω–∞–π —Å–≤–æ—é —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å!`;
      
      // –ò–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)
      const botUsername = 'knowyourmagic_bot';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ –ø—É—Ç–∏, –∫–∞–∫ –≤ –≤–∞—à–µ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
      const appUrl = `https://t.me/${botUsername}/${shareId}/app`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º Telegram –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞
      const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(appUrl)}&text=${encodeURIComponent(shareText)}`;
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —à–µ—Ä–∏–Ω–≥–∞ –≤ Telegram
      tgWebApp.openTelegramLink(shareUrl);
      
      console.log('–ü–æ–¥–µ–ª–∏–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π:', appUrl);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  }, [testResult, tgWebApp]);
  
  // –£–±–∏—Ä–∞–µ–º MainButton –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤ UI
  // –ò–Ω–∞—á–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ —à–µ—Ä–∏–Ω–≥–∞
  useEffect(() => {
    if (isTestCompleted && testResult) {
      // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —ç—Ç—É —á–∞—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      // const cleanup = showMainButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º', shareResult);
      // return cleanup;
      
      // –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ MainButton, –Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ UI
      // –ù–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
    }
  }, [isTestCompleted, testResult, showMainButton, shareResult]);
  
  return {
    currentQuestion: enhancedQuestions[currentQuestionIndex],
    currentQuestionIndex,
    totalQuestions: enhancedQuestions.length,
    selectedOption,
    isTestCompleted,
    testResult,
    compatibility,
    sharedTestId,
    handleOptionSelect,
    handleNextQuestion,
    restartTest,
    shareResult
  };
}
