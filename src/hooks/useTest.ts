import { useState, useCallback, useEffect } from 'react';
import { Option, Question, TestResult, Compatibility } from '../types';
import { questions } from '../data/questions';
import { determinePersonalityType, generateResult, analyzeCompatibility } from '../utils/results';
import { useTelegram } from './useTelegram';

export function useTest() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<Option[]>([]);
  const [selectedOption, setSelectedOption] = useState<Option | null>(null);
  const [isTestCompleted, setIsTestCompleted] = useState(false);
  const [testResult, setTestResult] = useState<TestResult | null>(null);
  const [sharedTestId, setSharedTestId] = useState<string | null>(null);
  const [compatibility, setCompatibility] = useState<Compatibility | null>(null);
  
  const { tgWebApp, showMainButton, getUserData } = useTelegram();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL (–µ—Å–ª–∏ —Ç–µ—Å—Ç –±—ã–ª –ø–æ–¥–µ–ª–µ–Ω)
  useEffect(() => {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const searchParams = new URLSearchParams(window.location.search);
    const testId = searchParams.get('testId');
    const powerType = searchParams.get('powerType');
    
    if (testId && powerType) {
      setSharedTestId(testId);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
      localStorage.setItem('sharedTestId', testId);
      localStorage.setItem('sharedPowerType', powerType);
    }
  }, []);
  
  // –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
  const handleOptionSelect = useCallback((option: Option) => {
    setSelectedOption(option);
  }, []);
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const handleNextQuestion = useCallback(() => {
    if (!selectedOption) return;
    
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestionIndex] = selectedOption;
    setSelectedAnswers(newAnswers);
    
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
      setSelectedOption(null);
    } else {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
      const powerType = determinePersonalityType(newAnswers);
      const result = generateResult(powerType);
      setTestResult(result);
      setIsTestCompleted(true);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ Result
      console.log('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ
      const sharedPowerType = localStorage.getItem('sharedPowerType');
      if (sharedPowerType) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–æ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–º
        const compatibilityData = analyzeCompatibility(powerType, sharedPowerType as any);
        setCompatibility(compatibilityData);
      }
    }
  }, [currentQuestionIndex, selectedOption, selectedAnswers]);
  
  // –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
  const restartTest = useCallback(() => {
    setCurrentQuestionIndex(0);
    setSelectedAnswers([]);
    setSelectedOption(null);
    setIsTestCompleted(false);
    setTestResult(null);
    setCompatibility(null);
  }, []);
  
  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–µ—Å—Ç–∞
  const shareResult = useCallback(() => {
    if (!testResult) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = getUserData();
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞
    const testId = Math.random().toString(36).substring(2, 15);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Miniapp —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π Telegram –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    const botUsername = 'knowyourmagic_bot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    
    // –í Telegram –µ—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:
    // 1. –ß–µ—Ä–µ–∑ WebApp.switchInlineQuery - –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    // 2. –ß–µ—Ä–µ–∑ WebApp.openTelegramLink - –¥–ª—è –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
      const shareText = `üß† –Ø –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç "–ü–∞–∑–ª—ã" –∏ —É–∑–Ω–∞–ª —Å–≤–æ—é —Å–∫—Ä—ã—Ç—É—é —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å!
      
–ú–æ—è —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${testResult.name} ${testResult.emoji}

"${testResult.songLine}"

–£–∑–Ω–∞–π —Å–≤–æ—é —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º switchInlineQuery –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ–Ω–∏—è
      // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      tgWebApp.switchInlineQuery(`test_${testId}_${testResult.type}`, ['users', 'groups', 'channels']);
      
      // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å shareUrl –¥–ª—è –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏:
      // const shareUrl = `https://t.me/${botUsername}/app?startapp=test_${testId}_${testResult.type}`;
      // window.open(shareUrl, '_blank');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
      
      // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const fallbackUrl = `https://t.me/${botUsername}/app?startapp=test_${testId}_${testResult.type}`;
      tgWebApp.openTelegramLink(fallbackUrl);
    }
  }, [testResult, tgWebApp, getUserData]);
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ —à–∞—Ä–∏–Ω–≥–∞ –≤ –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞
  useEffect(() => {
    if (isTestCompleted && testResult) {
      const cleanup = showMainButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º', shareResult);
      return cleanup;
    }
  }, [isTestCompleted, testResult, showMainButton, shareResult]);
  
  return {
    currentQuestion: questions[currentQuestionIndex],
    currentQuestionIndex,
    totalQuestions: questions.length,
    selectedOption,
    isTestCompleted,
    testResult,
    compatibility,
    sharedTestId,
    handleOptionSelect,
    handleNextQuestion,
    restartTest,
    shareResult
  };
}
